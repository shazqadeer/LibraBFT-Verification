type BlockId
type Block = struct {
    parent: BlockId,
    round: uint,
}

function Hash(Block): BlockId
const blocks: [BlockId]Block 
axiom forall id: BlockId. Hash(blocks[id]) == id

const h: uint // number of honest replicas
const f: uint // number of faulty replicas
axiom h > 2f

const root: BlockId // root of block tree
axiom blocks[root].height == 0 && blocks[root].parent == root

type HonestReplicaId = 1..h // ids of honest replicas

//// global model variables

// // all collected votes sent by honest replicas
// initial value: lambda id: BlockId. {}
var voteStore: [BlockId][HonestReplicaId]bool

// id of the latest globally-committed block 
// initial value: root  
var committed: BlockId

//// per-replica state

// monotonically increasing round of the last voted block 
// initial value: 0
var vround: uint

// id of the locked block
// initial value: 0
var lockedBlockRound: uint

// id of the latest locally-committed block 
// initial value: root
var locallyCommitted: BlockId

// primitive function that evaluates as follows: 
// if id' can reach id by following parent link 0 or more times, then set of all nodes along the path (id' and id inclusive)
// otherwise, empty set 
function Between(id': BlockId, id: BlockId) : [BlockId]bool

function Reaches(id': BlockId, id: BlockId): bool {
    Between(id', id) != {}
}

function Consistent(id': BlockId, id: BlockId) : bool {
    Reaches(id', id) || Reaches(id, id')
}

//// start things off
procedure Main() {
    var r: HonestReplicaId
    var newBlockId: BlockId

    async OnReceiveProposal(r, newBlockId)
    if * {
        async Main()
    }
}

//// top-level event handler at a replica to update vround and "send" vote
procedure OnReceiveProposal(r: HonestReplicaId, newBlockId: BlockId)
reads  voteStore, vround, lockedBlockRound
writes voteStore, vround, lockedBlockRound
{
    var newBlock: Block
    var numEquivocators: uint;

    assume numEquivocators <= f;
    newBlock := blocks[newBlockId]
<<<<<<< HEAD
    if voteStore[newBlock.parent] < h {
        return
    }
    if * { // models dynamic equivocation
=======
    if card(voteStore[newBlock.justify]) + numEquivocators < h {
>>>>>>> ec79bab6ddcda8ae9938eb022c969194e04c5a2d
        return
    }
    if newBlock.round > vround[r] &&
             blocks[newBlock.parent].round > lockedBlockRound[r] {
        vround[r] := newBlock.round
        voteStore[newBlockId][r] := true
    }
    Update(r, newBlock.parent)
}

//// update lockedBlockRound and make the async call to commit the 3-chain head
procedure Update(r: HonestReplicaId, id'': BlockId)
reads  lockedBlockRound
writes lockedBlockRound
{
    var id', id: BlockId
    var b'', b', b: Block

    b'' := blocks[id'']
    id' := b''.parent
    b'  := blocks[id']
    id  := b'.parent
    b   := blocks[id]
    if b'.round > lockedBlockRound[r] {
        lockedBlockRound[r] := b'.round
    }
    if b''.round == b'.round + 1 && b'.round == b.round + 1 {
        async Commit(r, id)
    }
}

//// internal event handler at a replica to update locallyCommitted and committed
//// and assert consensus safety
procedure Commit(r: HonestReplicaId, id: BlockId) 
reads  locallyCommitted, committed
writes locallyCommitted, committed
{
    // the fact stated below is preserved by the body of Commit
    // (forall x: HonestReplicaId. Reaches(committed, locallyCommitted[x]))
    assert Consistent(id, committed)
    if Reaches(id, locallyCommitted[r]) {
        locallyCommitted[r] := id
    }
    if Reaches(id, committed) {
        committed := id
     }
 }

