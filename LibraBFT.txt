type BlockId
type Block = struct {
    parent: BlockId,
    round: uint,
}

function Hash(Block): BlockId
const blocks: [BlockId]Block 
axiom forall id: BlockId. Hash(blocks[id]) == id

const h: uint // number of honest replicas
const f: uint // number of faulty replicas
axiom h > 2f

const root: BlockId // root of block tree
axiom blocks[root].round == 0 && blocks[root].parent == root

type HonestReplicaId = 1..h // ids of honest replicas

//// global model variables

// // all collected votes sent by honest replicas
// initial value: lambda id: BlockId. r: HonestReplicaId. id = root
var voteStore: [BlockId][HonestReplicaId]bool

// id of the latest globally-committed block 
// initial value: root  
var committed: BlockId

//// per-replica state

// monotonically increasing round of the last voted block 
// initial value: 0
var vround: uint

// id of the locked block
// initial value: 0
var lockedBlockRound: uint

// primitive function that evaluates as follows: 
// if id' can reach id by following parent link 0 or more times, then set of all nodes along the path (id' and id inclusive)
// otherwise, empty set 
function Between(id': BlockId, id: BlockId) : [BlockId]bool

function Reaches(id': BlockId, id: BlockId): bool {
    Between(id', id) != {}
}

function Consistent(id': BlockId, id: BlockId) : bool {
    Reaches(id', id) || Reaches(id, id')
}

procedure HasQuorum(blockId: BlockId) : bool 
reads voteStore
{
    var numEquivocators: uint
    assume numEquivocators <= f

    card(voteStore[blockId]) + numEquivocators >= h
}

//// start things off
procedure Main() {
    var r: HonestReplicaId
    var blockId: BlockId

    if * {
        async OnReceiveProposal(r, blockId)
    } else {
        async TryCommit(r, blockId)
    }
    if * {
        async Main()
    }
}

//// top-level event handler at a replica to update vround and "send" vote
procedure OnReceiveProposal(r: HonestReplicaId, newBlockId: BlockId)
reads  voteStore, vround, lockedBlockRound
writes voteStore, vround, lockedBlockRound
{
    var newBlock: Block
    var id': BlockId
    var b'', b': Block

    newBlock := blocks[newBlockId]
    id'' := newBlock.parent
    if !HasQuorum(id'') {
        return
    }
    b'' := blocks[id'']
    if newBlock.round > vround[r] && b''.round > lockedBlockRound[r] {
        vround[r] := newBlock.round
        voteStore[newBlockId][r] := true
    }
    id' := b''.parent
    b'  := blocks[id']
    if b'.round > lockedBlockRound[r] {
        lockedBlockRound[r] := b'.round
    }
}

//// event handler at a replica to update committed and assert consensus safety
procedure TryCommit(r: HonestReplicaId, id'': BlockId)
reads  voteStore, committed
writes committed
{
    var id', id: BlockId
    var b'', b': Block

    if !HasQuorum(id'') {
        return
    }
    b'' := blocks[id'']
    id' := b''.justify
    b'  := blocks[id']
    id  := b'.justify
    if b''.round == b'.round + 1 && b'.round == b.round + 1 {
        assert Consistent(id, committed)
        if Reaches(id, committed) {
            committed := id
        }
    }
}
